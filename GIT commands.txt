--- GENERAL COMMANDS ---

cd [path]: Changes path to specified

echo "[file_content]" >> [file_name]: Creates a new file or writes into it.

--- SETTING UP A REPOSITORY ---

git init <flag>: Creates a new repository

<flags>
    --bare: Creates a repository as a storage facility, therefore, does not allow to commit to it (Central repositories must be bare).
    --template=[template_directory]: specifies from which templates the directory must be used.
    --separate-git-dir=[git_directory]: Creates a text file which contains the path to git_directory.
    --shared=[]: Specifies that the repository will be shared among several users, allowing them to push/pull to it.

git clone <flag> [repository_url]: Clones an existing repository, usually located online.

<flags>
    -branch: Specifies which branch to clone instead of the one the HEAD pointer is indicating to (usually the mastar branch).
    --bare: Creates a copy of the remote repository, excluding the working directory (push/pull only).
    --mirror: Clones all the extended references of the remote repository, maintaining a remote branch tracking configuration.

[repository_url]s
    git
    ssh
    HTTPS
    local

git config <flag> <subject>.<characteristic> [value]

<flags>
    --global: Current user
    --local: Current local repository
    --system: System, all users and repositories on a machine

<subject>
    user
    core
    alias

<characteristic>
    name
    email
    editor
    
git alias (direct command doesn't exists. You can create them with git config)

    # Creates the alias 'c' for commit 
    git config --global alias.c commit 

    # Lists all the alias
    git config --list

--- SAVING CHANGES ---

git add [file_name/option]: Update the changes made to a file into the staging area of the repository.

[option]s
    -p: Stages all the changes in the directory for the next commit

git commit [option] "[commit_message]": Saves all the changes in the staging area.

[option]s
    -a: Commits all changes in the working directory (only modifications to tracked files are included).
    -m: Creates a commit and opwns the locally configured text editor to enter a commit message.
    -am: Combines a and m options.
    --amend: Allows to modify the last commit and opens the text editor to change the previously specified commit message.

git stash [optional_parameter/option]: Shelves changes you've made to your working directory, so you can come back later and re-apply them. It takes uncommited both staged and unstaged changes and saves them away for further use. You can return them for further use.

[optional_parameter]s
    pop: Removes the changes from the stash and re-applies them to the working copy.
    apply: Re-applies the changes and keeps them in the stash.
    list: Lists all stashed changes
    save "message": Adds some context to the stashed changes.
    drop stash@{[stash_number]}: Deletes the specified stash
    clear: Deletes all stashes.
    pop stash@{3}: Stashes the fourth stashed changes on the list.
    show: Shows a summary of a stash.
    show -p: Shows the full diff of a stash.
    branch [branch_name] stash@{[stash_number]}: Creates a new branch from stashed changes

[option]s
    --include-untracked: Stashes the untracked files.

git diff [option/branch_comparison]: Compares changes commited. You can take two input data sets and output the modifications between them

[option]s
    --color-words: Highlights the words changed before and after the commit by changing their colour.

[branch_comparison]s: Compares two branches
    branch1..branch2: The different input is the tips of both branches.
    branch1...branch2: Changes the first input parameter (branch1) initiating the diff.
    branch1 branch2 "file_name": Compares a file between two branches.

.gitignore: Is the name of a file in which you include the names of the files you don't want to commit. (more here: https://www.w3docs.com/learn-git/gitignore.html)

[Pattern]s
    **/logs: Matches any directory with name "logs"
    **/logs/debug.log: Matches any files "debug.log" with parent folder "logs".
    *.log: Refers to every file with ".log" at the end
    *.log !important.log
    *.log !important/*.log trace.*
    /debug.log: Matches "debug.log" files only in the repository root.
    debug.log: By default, matches files in any directory.
    debug?.log
    debug[0-9].log: Matches any file named "debug[number].log", [number] being the range from 0 to 9.
    debug[01].log: Matches "debug0.log" or "debug1.log".
    debug[!01].log: Matches any character except one from the particular set.
    debug[a-z].log: Matches a single character from an alphabetic or numeric range
    logs: The pattern will match anything named "logs" (directories and files) if slash is not used.
    logs/: Slash points that the pattern is a directory named "logs".
    logs/**/debug.log: Matches zero or more directories.
    logs/*day/debug.log: ...

--- EXAMINING A REPOSITORY ---

git status [option]: It shows the state of the working directory and the staging area.

[option]s
    -s: Outputs the short format
    -b: Displays the branch and tracking information in the short format.
    --porcelain: Outputs in a easy-to-parse format for scripts.
    --long: Default. Outputs in the long format.
    -u[mode]: Displays the untracked files.
        no: Displays no untracked files.
        normal: Displays untracked files and directories.
        all: Displays individual files in untracked directories.
    --ignore[when]: Ignores changes to submodules when looking for changes.
        "none"
        "untracked"
        "dirty"
        "all"
    -z: Terminates entries with NUL
    --column: Displays untracked files in columns

git log [option]: Shows commited snapshots. It is used for listing and filtering the project history, and searching for particular changes.

[option]s
    -n[number]: Limits the number of commits to the specified number.
    --oneline: Fits each commit on a single line.
    --stat: Includes changed files and the number of added or deleted lines from them.
    -p: shows the patch for each commit and their full diff.
    -S "string": Displays all the initial commits with a particular added or changed code on the string argument.
    --brances=*: Displays all the commits accross all the branches.
    --author=<"pattern">: Searches for commits by a specified author.
    --grep=<"pattern">: Searches for commits with a commit message.
    <since>..<until>: Displays commits that occur between <since> and <until> arguments. They can be a commit ID, a branch name, HEAD, or other kind of revision reference.
    <"file">: Displays commits that include the specified file.
    --graph --decorate --oneline: Draws a text-based graph of the commits | Adds the names of branches or tags of the displayed commits | Displays the commit info on a single line.

git tag [option] "[tag_name]" [ID_of_commit]: A tag is a reference point in a Git history marking version release. This command creates a tag on the commit mentioned by HEAD by default.
[option]s
    -a: Creates an annotated tag. It can include some metadata like tagger name, email, date, and tagging message.
    -lw: Creates a lightweight tag with no metadata.
    NONE: Shows a list of all the tags.
    -l <"pattern">: Shows a list of tags that match the pattern.
    -a -f: Forces the renaming of old tags when inserting a tagged ID_of_commit and changing the tag_name.
    -d: Deletes the tag identified by tag_name.


git blame [option] "[file_name]": Displays the author metadata attached to a particular commited line in a file. It is used to explore the file history.

[option]s
    -L 1,3: Limits the output to the requested line range
    -e: Displays the author's email address instead of username.
    -w: Ignores whitespace changes.
    -M: Detects moved or copied lines within the same file, reporting their original author instead of the one who copied them.
    -C: Detects lines that were moved or copied from other files, reporting their original author.

--- UNDOING CHANGES ---

git clean [option]: Is an undo command to eliminate untracked files and directories, running in untracked files only.

[option]s
    -n: Shows the files that are going to be deleted, but doesn't remove them.
    -f <path>: Deletes untracked files from the current directory, excepting the ones inside .gitignore. <path> can be introduced to specify which file to delete.
    -x: Deletes untracked files, even the ones inside .gitignore.
    -dn: Shows the directories that are going to be removed
    -df: Deletes untracked directories.
    -dx: Deletes untracked directories, even the ones inside .gitignore.
    -i: Activates interactive mode with numerical commands.

git revert [option] [reference]: Creates a new commit reversing the last commit made, leaving it in the history. This command can be used for automatically go back and make fixes.

[option]s
    -e: Opens the configured system editor and prompts you to edit the commit message before committing the revert. Default.
    --no-edit: It doesn't open the text editor.
    -n: Adds the inverse modifications to the staging area and working directory instead of creating a new commit.

[reference]s
    HEAD: Reverts the last commit
    # branch name
    # ID of commit

git reset [option] [reference]: Command that allows to undo changes once they are made through the three trees (working directory, staging area, and commit history). It moves both HEAD and the branch references to the defined commit, changing the state of the three trees.
[option]s
    --mixed: The commit history will be reset to the stated commit, and the staging area will be reset to the stated commit. Undone changes from the staging area will be placed in the working directory.
    --soft: The commit history will be reset to the stated commit, but it doesn't affect the staging index and the working directory.
    --hard: The commit history will be reset to the stated commit, and any work done down the commit history will be lost.
    none: Resets the staging area to correspond with the last commit, but leave the working directory unchanged.

[reference]s
    HEAD (default)
    [no_option] ID of commit: Resets the staging area to match the commit's, but not touching the working directory.
    [no_option] <file>: Removes the specified file from the staging area without changing the working directory

git rm <file> [option]: Removes specific tracked files from the staging area or the working directory. It doesn't remove branches.
[option]s
    -f: Overrides the security check that makes sure that the files in HEAD correspond to the content of the staging area.
    -n: Ouptuts which files to remove.
    -r: Removes a target directory and its whole content when working in recursive mode.
    --cached: Specifies that deletion only occurs on the staging area. Working directory is left alone.
    --ignore-unmatch: Exits with a 0 status even if no files matched.
    -q: Hides the output of the command.

--- REWRITING HISTORY ---

git commit --amend [option]: Replaces the current commit entirely by combining staged changes with the previous commit instead of having to create a new one.
[option]s
    -m "message": Modifies the log message of the previous commit.
    --no-edit: Combines the current commit with the last one without changing the last commit message.

git rebase INCOMPLETE! [option] <reference>: Moves or combines a series of commits from a feature branch to another branch.
[option]s
    -i: Opens interactive mode.
    -- onto <ref1> <ref2>
    -- d: Discards the commit from the final combined commit block during playback.
    -- p: It doesn't edit the message or the content of the commit remaining an individual commit in the branch history.
    -- x: Allows to run a command line shell script on each marked commit during playback.


<reference>s
    Branch name: Applies the commits in the current working branch to the passed branch's head. The current branch will be rebased onto the entered branch.
    tag
    ID of commit


git recap: Cleans a branch history by removing meaningless or dead commits.



git reflog:

git requested


---  ---

git checkout [selector]: Moves the HEAD pointer to the specified commit, resulting in the repository's status "detached". In this status, every new commit will be disposed by Git unless the HEAD is reunited with its branch.

[selector]s

    NONE: Checkouts the previous to the last commit.
    <ID_of_commit>: Displays the commit identified with the ID
    <branch_name>: Navigates to the specified branch to continue development there.



git push

git remote add [remote_name] [remote_repository_url]

    git push



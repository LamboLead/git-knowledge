git init <flag>: Creates a new repository

<flags>
    --bare: Creates a repository as a storage facility, therefore, does not allow to commit to it (Central repositories must be bare).
    --template=[template_directory]: specifies from which templates the directory must be used.
    --separate-git-dir=[git_directory]: Creates a text file which contains the path to git_directory.
    --shared=[]: Specifies that the repository will be shared among several users, allowing them to push/pull to it.

git add [file_name/option]: Update the changes made to a file into the staging area of the repository.

[option]s
    -p: Stages all the changes in the directory for the next commit

git commit [option] "[commit_message]": Saves all the changes in the staging area.

[option]s
    -a: Commits all changes in the working directory (only modifications to tracked files are included).
    -m: Creates a commit and opwns the locally configured text editor to enter a commit message.
    -am: Combines a and m options.
    --amend: Allows to modify the last commit and opens the text editor to change the previously specified commit message.

git diff [option/branch_comparison]: Compares changes commited. You can take two input data sets and output the modifications between them

[option]s
    --color-words: Highlights the words changed before and after the commit by changing their colour.

[branch_comparison]s: Compares two branches
    branch1..branch2: The different input is the tips of both branches.
    branch1...branch2: Changes the first input parameter (branch1) initiating the diff.
    branch1 branch2 "file_name": Compares a file between two branches.

git stash [optional_parameter/option]: Shelves changes you've made to your working directory, so you can come back later and re-apply them. It takes uncommited both staged and unstaged changes and saves them away for further use. You can return them for further use.

[optional_parameter]s
    pop: Removes the changes from the stash and re-applies them to the working copy.
    apply: Re-applies the changes and keeps them in the stash.
    list: Lists all stashed changes
    save "message": Adds some context to the stashed changes.
    drop stash@{[stash_number]}: Deletes the specified stash
    clear: Deletes all stashes.
    pop stash@{3}: Stashes the fourth stashed changes on the list.
    show: Shows a summary of a stash.
    show -p: Shows the full diff of a stash.
    branch [branch_name] stash@{[stash_number]}: Creates a new branch from stashed changes

[option]s
    --include-untracked: Stashes the untracked files.

.gitignore: Is the name of a file in which you include the names of the files you don't want to commit. (more here: https://www.w3docs.com/learn-git/gitignore.html)

[Pattern]s
    **/logs: Matches any directory with name "logs"
    **/logs/debug.log: Matches any files "debug.log" with parent folder "logs".
    *.log: Refers to every file with ".log" at the end
    *.log !important.log
    *.log !important/*.log trace.*
    /debug.log: Matches "debug.log" files only in the repository root.
    debug.log: By default, matches files in any directory.
    debug?.log
    debug[0-9].log: Matches any file named "debug[number].log", [number] being the range from 0 to 9.
    debug[01].log: Matches "debug0.log" or "debug1.log".
    debug[!01].log: Matches any character except one from the particular set.
    debug[a-z].log: Matches a single character from an alphabetic or numeric range
    logs: The pattern will match anything named "logs" (directories and files) if slash is not used.
    logs/: Slash points that the pattern is a directory named "logs".
    logs/**/debug.log: Matches zero or more directories.
    logs/*day/debug.log: ...

git status

cd [path]

echo "[file_content]" >> [file_name]






git clone <flag> [repository_url]: Clones an existing repository, usually located online.

<flags>
    -branch: Specifies which branch to clone instead of the one the HEAD pointer is indicating to (usually the mastar branch).
    --bare: Creates a copy of the remote repository, excluding the working directory (push/pull only).
    --mirror: Clones all the extended references of the remote repository, maintaining a remote branch tracking configuration.

[repository_url]s
    git
    ssh
    HTTPS
    local


    git push

    git remote add [remote_name] [remote_repository_url]

    git push


git config <flag> <subject>.<characteristic> [value]

<flags>
    --global: Current user
    --local: Current local repository
    --system: System, all users and repositories on a machine

<subject>
    user
    core
    alias

<characteristic>
    name
    email
    editor

git alias (direct command doesn't exists. You can create them with git config)

    # Creates the alias 'c' for commit 
    git config --global alias.c commit 

    # Lists all the alias
    git config --list
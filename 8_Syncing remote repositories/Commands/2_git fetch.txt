$ git fetch ...

Downloads commits, files, and references from a remote repository, displaying what other members of the team have been working on without integrating it into the working copy.

This command does not have any effect on the local work, and it should be checked out using 'git checkout', making it safe to review commits before merging them into the local repository.

'git pull', unlike 'git fetch', not only downloads the new content but also integrates it into the current working copy, sometimes causing merging conflicts.

--- OPTIONS

    --all
        Fetches all the remote branches.

    --dry-run
        Shows the demo run of the command without making changes.

    -k
        Keeps downloaded pack.
    
    -p
        Removes the remote-tracking references not existed on the remote repository before fetching.

    --depth=<number>
        Limits the number of commits to fetch from the tip of each remote branch history.

--- FETCHING THE REMOTE BRANCH

    These are the steps for fetching a remote branch and update the local working directory to the remote content.

    1. Configure the remote repository
        $ git remot test_repo git@hostname:test/test_repo.git

    2. Download the content of 'feature_branch' from the remote repository and integrate it into the local repository.
        $ git fetch test_repo feature_branch

    3. Checkout to the downloaded remote branch. This will put your local repository into a 'detached HEAD' state.
        $ git checkout test_repo/feature_branch

    4. Create a new local branch 'local_feature_branch' with the content of the 'feature_branch' from 'test_repo'.
        $ git checkout -b local_feature_branch

    Now, HEAD is pointing at the latest remote commit.

--- SYNCHRONIZING ORIGIN
    
    This example will show how to synchronize the local repository with the central repository's master branch.

    1. Download the branches from the central repository.
        $ git fetch origin

    2. Show and compare the commits added to the remote master against local master with 'git log' using 'origin/master'.
        $ git log --oneline master..origin/master

    3. Check the changes and merge them into the local master branch.
        $ git checkout master
        $ git log origin/master
        $ git merge origin/master

    

    
        COMPLETE THIS FUCKING SECTION
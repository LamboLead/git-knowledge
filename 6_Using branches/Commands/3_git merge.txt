$ git merge ...

Integrates the independent lines of development into a single commit on a single branch. It won't combine the data or erase the merged branch.
It also merges multiple commits into one history if arguments are commits.

--- MERGING PROCESS

    1. Point HEAD to the correct merge-receiving branch with 'git checkout'. Run 'git status' before that to know which branch HEAD is pointing to.
        $ git status
        $ git checkout <receiving_branch_name>
    
    2. (optional) The receiving and merging branch should be updated with the latest remote changes running 'git fetch'. Then, update the master branch with 'git pull'
        $ git fetch ...
        $ git pull ...

    3. Merge the branches
        $ git merge <branch_to_merge>

--- MERGING TYPES

    Fast-forward merge:
        It occurs when the path from the current branch to the branch to be merged is linear (only one line of development). The fast-forward merge combines the histories, as all the commits that are reachable from the merging branch are available through the current branch.
        It is used to fix bugs and integrate small features to the main branch.

    3-way merge:
        Occurs when the two histories are diverged (two lines of development). It uses a dedicated commit to combine the two histories.
        It is used to integrate long-running features to the main branch, as the main branch keeps progressing.

--- OPTIONS

    --no-ff <branch_name>
        Creates a new commit during a fast-forward merge instead of uniting both branches in the last commit created.

--- RESOLVING CONFLICTS

    These are the types of merging conflicts:

    Merge failure on start:
        Occurs when the pending changes in the working directory or staging area of the project aren't yet committed.
        Solution:
            Commit, stash or discard the changes before merging.

    Merge failure during merge:
        Occurs when when you want to merge two branches, and the same part of the same file is changed in both of them. They only appear in 3-way merges.
        Solution:
            Git lets you choose which version to keep, using edit/stage/commit workflow for resolving merge conflicts.

    These are the commands that you may find useful when dealing with merge conflicts:
    
    General:
        $ git status
            Helps find conflicting files

        $ git log --merge
            Creates a log with a list of commits having conflict between the merging branches.

        $ git diff
            Finds diferences between the states of the files, predicting and preventing merge conflicts.

    To solve failure on start:
        $ git checkout
            Undoes changes to the files changing branches.

        $ git reset --mixed
            Undoes changes to the working directory and staging area. Resets the commit.

        $ git add & $ git commit
            Commits changes.

    To solve failure on merge:
        $ git merge --abort
            Exits from the merge process and returns the branch to the state before it began.

        $ git reset:
            Resets conflicting files to a known good state.

--- MERGING STRATEGIES

    When the work is complete and ready to be merged, you should choose between the following merging strategies:

    -s recursive <branch_name_1> <branch_name_2>
        Default strategy. Detects and manages merges that involve renames, but it cannot use detected copies. There are more merging strategies that derives from this one that can be found below this section.

    -s resolve <branch_name_1> <branch_name_2>
        Uses a 3-way merge for resolving branches. It is safe, fast, and detects criss-cross merge ambiguities in detail.

    -s octopus <branch_name_1> <branch_name_2> <branch_name_N>
        Engaged by default when two or more branches to merge are passed. It refuses if the merge has conflicts that need manual resolution.

    If not specified, 'git merge' will automatically select a merge strategie based on the provided branches.

--- MERGING STRATEGIES DERIVED FROM RECURSIVE

    -s ours <branch_name_1> <branch_name_2> <branch_name_N>
    Forces conflicting parts to be auto-resolved favoring 'our' version. Intended to replace an old history of side branches.

    -s theirs <branch_name_1> <branch_name_2>
    Forces conflicting parts to be auto-resolved favoring 'their' version.

    -s patience
        Spends much time to avoid mis-merges that occur because of unimportant matching lines.

    -s diff-algorithm
        Instructs "merge-recursive" to use a different diff algorigthm that helps to avoid mis-merges on unimportant matching lines.

    -s ignore-space change
    -s ignore-all-space
    -s ignore-space-at-eol
    -s ignore-cr-at-eol
        Targets whitespace characters.

    -s renormalize
        Runs a check-out and check-in on all of the file stages when resolving a 3-way merge.

    -s no-normalize
        Disables the renormalize option.

    -s no-renames
        Ignores renamed files during merge.

    -s find-renames=n
        Turns on the rename detection passing a similarity threshold. The n value is 100%.

    -s subtree <branch_name_1> <branch_name_2>
        It is a modified version of the recursive strategy. Useful when merging branches that have subtrees.